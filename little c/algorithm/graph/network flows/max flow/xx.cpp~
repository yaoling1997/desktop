#include<cstdio>
#include<cstdlib>
#include<vector>
#include<cstring>
using namespace std;
const int maxn= 1000,oo= 99999999;
struct edge{
	int to,cap;
};
vector<edge> edges;
vector<int> g[maxn];
int cur[maxn],d[maxn],l[maxn];
bool vis[maxn];
int n,m,s,t,i,j,x,y,z,f,r;
long long flow;
void addedge(int from,int to,int cap)
{
	edges.push_back((edge){to,cap});
	edges.push_back((edge){from,0});
	int m= edges.size();
	g[from].push_back(m-2);
	g[to].push_back(m-1);
}
bool bfs ()
{
	memset(vis,0,sizeof(vis));
	f= 0; r= 1;
	l[r]= s;
	vis[s]= 1;
	while (f!=r){
		f++;
		for (int i= 0;i<g[l[f]].size();i++){
			edge& e= edges[g[l[f]][i]];
			if (!vis[e.to] && e.cap>0){
				vis[e.to]= 1;
				d[e.to]= d[l[f]]+1;
				l[++r]= e.to;
			}
		}
	}
	return vis[t];
}
long long dfs(int o,int rest)
{
	if (o==t || rest== 0) return rest;
	int flow= 0;f;
	for (int& i= cur[o];i<g[o].size();i++){
		edge& e= edges[g[o][i]];
		if (d[o]+1==d[e.to] && (f= dfs(e.to,min(rest,e.cap))>0)){
			e.cap-= f;
			edges[g[o][i]^1].cap+= f;
			flow+= f;
			rest-= f;
			if (rest==0) break;
		}
	}
	return flow;
}
int main()
{
	freopen("1.in","r",stdin);
	freopen("2out","w",stdout);
	scanf("%d %d %d %d\n",&n, &m, &s, &t);
	for (i=1 ;i<=m;i++){
		scanf("%d %d %d\n",&x, &y, &z);
		addedge(x,y,z);
	}
	while (bfs()){
		memset(cur,0,sizeof(cur));
		flow+=dfs(s,oo);
	}
	printf("%lld",flow);
	return 0;
}
