#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<iostream>
using namespace std;
const int maxn= 3001;
const double eps = 1e-8;
struct point{
	double x,y;
};
typedef point vec;
vec operator +(vec a,vec b){a.x+= b.x;a.y+= b.y;return a;}
vec operator -(vec a,vec b){a.x-= b.x;a.y-= b.y;return a;}
vec operator *(double t,vec a){a.x*= t;a.y*= t;return a;}
vec operator /(vec a,double t){a.x/= t;a.y/= t;return a;}
bool operator <(vec a,vec b){return (a.x<b.x) || (a.x==b.x && a.y<b.y);}
double cj(vec a,vec b){return a.x*b.y-a.y*b.x;}
point pn[maxn],p;
int n,i;
bool ipos(point a,point b,point p){
	double x1= min(a.x,b.x),x2= max(a.x,b.x);
	double y1= min(a.y,b.y),y2= max(a.y,b.y);
	if (fabs(cj(b-a,p-a))<=eps){
		if (x1!=x2) return x1<=p.x && p.x<=x2;
		else return y1<=p.y && p.y<= y2;
	}
	else return 0;
}
int ipip(point* pn,point p){
	double wn= 0,k,d1,d2;
	for (int i= 1;i<n;i++){
		if (ipos(pn[i],pn[i+1],p)) return -1;
		k= cj(pn[i+1]-pn[i],p-pn[i]);
		d1= pn[i].y-p.y;
		d2= pn[i+1].y-p.y;
		if (k>0 && d1<=0 && d2>0) wn++;
		if (k<0 && d2<=0 && d1>0) wn--;
	}
	if (ipos(pn[n],pn[1],p)) return -1;
	k= cj(pn[1]-pn[n],p-pn[n]);
	d1= pn[n].y-p.y;
	d2= pn[1].y-p.y;
	if (k>0 && d1<=0 && d2>0) wn++;
	if (k<0 && d2<=0 && d1>0) wn--;
	return (wn!=0);
}
int main(){
	freopen("1.in","r",stdin);
	freopen("1.out","w",stdout);
	scanf("%d %lf %lf\n",&n, &p.x, &p.y);
	for (i= 1;i<=n;i++)
		scanf("%lf %lf\n",&pn[i].x, &pn[i].y);
	int ans= ipip(pn,p);
	if (ans==1) printf("yes!");
	else if (ans==0) printf("no!");
	else printf("online!");
	return 0;
}
