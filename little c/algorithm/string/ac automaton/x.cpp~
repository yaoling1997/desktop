#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
using namespace std;
const int maxn= 3001,sig= 30;
struct node{
	int ch[sig+1];
	int v;
};
node a[maxn];
char s[maxn][120],st[maxn];
int F[maxn],last[maxn],d[maxn];
int n,i,j,len,now,top,L;
int idx(char c){return c-'a';}
void getFail(){
	queue<int> Q;
	int i;F[0]= 0;
	for (i= 0;i<sig;i++){
		int v= a[0].ch[i];
		if (v){
			Q.push(v);
			F[v]= last[v]= 0;
		}
	}
	while (!Q.empty()){
		int u= Q.front();
		Q.pop();
		for (i= 0;i<sig;i++){
			int v= a[u].ch[i];
			if (v){
				Q.push(v);
				int j= F[u];
				while (j && !a[j].ch[i]) j= F[j];
				j= a[j].ch[i];
				F[v]= j;
				last[v]= a[j].v? j:last[j];
			}
		}
	}
}
void print(int j){
	while (j){
		d[a[j].v]++;
		j= last[j];
	}
}
void find(char *t){
	int len= strlen(t+1),i,j= 0;
	for (i= 1;i<=len;i++){
		int c= idx(t[i]);
		while (j && !a[j].ch[c]) j= F[j];
		j= a[j].ch[c];
		if (a[j].v) print(j);
		else print(last[j]);
	}
}
int main()
{
	freopen("1.in","r",stdin);
	freopen("1.out","w",stdout);
	scanf("%d",&n);
	for (i= 1;i<=n;i++){
		scanf("%s",s[i]+1);
		len= strlen(s[i]+1);
		now= 0;
		for (j= 1;j<=len;j++){
			int c= idx(s[i][j]);
			if (a[now].ch[c]) now= a[now].ch[c];
			else {
				a[now].ch[c]= ++top;
				now= top;
			}
		}
		a[now].v= i;
	}
	getFail();
	scanf("%s",st+1);
	find(st);
	for (i= 1;i<=n;i++)
		if (d[i])
			printf("%s\n",s[i]+1);
	return 0;
}
