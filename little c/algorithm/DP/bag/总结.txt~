01背包：
每件物品最多取一次，求将哪些物品放入背包使总价值最大
要求把背包装满：除f[0]=0以外其它的状态都为-oo
不要求装满：都为0
倒着枚举容量保证f[i][j]从 f[i-1][j]转过来

完全背包:
每种物品有无限件
正着枚举容量，保证物品可用多次

多重背包:
每件物品最多用n[i]次
n[i]*cost>v做完全背包
否则把物品拆成2的次方幂,做01背包

混合背包:
就是遇到什么物品调什么过程

二维费用背包:
每件物品有两种费用

分组背包:
每个组只能选一个物品,每个组中对于每一个容量枚举物品就行了
简单有效的优化:去掉没用的物品

有依赖的背包:
若选物品i则必须选物品j
对每个主件所在集合来一次01背包，再使用分组背包

x:
混合背包
给定两个数n,v
接下来每行若第一个数字为1,是01背包
为2,是完全背包
为3,则一行4个数,价值,花费,和个数
对于多重背包,把个数拆成二进制就好了(任何数都可以拆成2的次幂之和)
为什么01背包不直接把物品编号带进去呢?因为为了后面的多重背包服务
k从1每次*2,num从g[o]开始每次-k
最后不要忘记把num*c[o],num*w[o]带进去再做一次01背包
c[]是价值,w[]是花费

