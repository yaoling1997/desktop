别人都说string慢，都用字符数组，所以我想一探string的究竟
首先string g;
用push_back()向g的后面加入元素
添加10^7个字符只要0.143s,添加10^8个字符要1.368s
也可以直接赋值 g[i]='?'
用g.size() or g.length()返回g的长度
g.empty()判断是否为空
我认为 string的删除是O(n^2)的，但是好像快一点
比如说我在string里插入2000000个字符
然后我调用g.erase(g.begin())删begin100次
应该是1e8的次数(因为要移动字符)，至少也要1s吧，但是却差不多只要0.6s。
但要是我在string里添加20000个字符，删begin10000次却只要0.008s
我在string中添加了2*1e^8个字符，需要2.162s，但是我调用g.erase(g.begin(),g.begin()+1)时间为2.680s直接g.erase(g.begin())也要2.592s
再谈谈插入
我在g里添加10^5个字符，然后在前端插入10000个字符，需要0.158s，
里面字符个数为10^6,同样添加10000个字符，需要1.845s
多次插入中(相同次数)插入字符和插入只含有单个字符的字符串时间是一样的
字符串中的字符变多了会影响时间效率，因为串长变长了
插字符是用指针插
插字符串是用下标插
如果用cin和cout读入太慢，就用getchar()+push_back(),和putchar(g[i])吧
s.length()的复杂度为O(1)和s.size()一样
g.c_str(),把string转化成字符数组
