e:
题意是给出一个n*m的棋盘
每个格子有0和1两种取值
可以选择翻转一些行和列
每次翻转对应的行和列中的0变成1,1变成0
问棋盘上最少多少个1
由于n<=20
所以很显然会想到枚举行的翻转状态
当行的翻转状态确定时
只需要从左往右扫1到m
设当时的每列的1的个数为ci
那么对于每列
要么取ci,要么取n-ci
所以取min(ci,n-ci)
复杂度是O(m*2^n)的
想一个更好的算法
对于每行
我们只在乎1的个数
设dp[k][mask]
行翻转的状态是mask
mask第i位为1表示第i+1行反转了
k表示按mask翻转完行之后,列中1的个数为k
dp[k][mask]存的就是有多少列中1的个数为k
对于mask
它的答案就是 sigma min(k,n-k)*dp[k][mask] (k属于0到n)
设ci表示原来(即没有进行行翻转)每列的状态
那么ci对dp[0][ci]的贡献为1
因为mask==ci时,ci的1的个数为0
所以我们可以花O(m)的时间处理出dp[0][mask]
然后考虑怎么转移
对于mask和某一列i
假设他们恰有k位不同
即在mask状态下
第i列有k个1
假设其中第p位不同
那么 mask xor 2^p 与ci 在第p位相同
mask xor 2^p 与ci有k-1位不同
所以对于dp[k][mask]
逐位考虑与mask的第p位不同的那些列
假设现在考虑的是第p位
令dp[k][mask]= dp[k-1][mask xor 2^p]
但由于在mask xor 2^p状态下有k-1个1的列中包括第p位不和mask xor 2^p的第p位相同的
即包括和mask的第p位相同的那些列
所以又要减去这些列(竟然是容斥...容斥的题目做得太少了)
所以dp[k][mask]=dp[k-1][mask xor 2^p]-dp[k-2][mask]+dp[k-3][mask xor 2^p]-...
                  n-1  k
dp[k][mask]= 1/k*sigma sigma(-1)^(f-1)*dp[k-f][mask xor (2^p*(fmod2))]
                  p=0  f=1
p是从0到n-1的
由于对于每个k,每一个有k个1的列与mask有k位不同
所以它被算进dp[k][mask]里算了k次
所以dp[k][mask]还要/=k
这样做的复杂度是O(n^3*2^n)
然后还可以优化一下
就是划下式子
令k-2代k
然后划一下式子
就变成                                n-1
dp[k][mask]=1/k((k-2-n)*dp[k-2][mask]+sigma dp[k-1][mask xor 2^p])
                                      p=0
复杂度O(n^2*2^n)
