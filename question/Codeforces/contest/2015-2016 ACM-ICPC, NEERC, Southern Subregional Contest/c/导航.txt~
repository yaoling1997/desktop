c:
做完这道题,感觉自己弱爆了
想到了分治,但是那些细节问题总想不清
膜拜别人的代码半天才搞出来
题目就是给出一个len<=100的字符串
还有n和m
n代表天数,m代表询问数
接下来n个<=100的数字x
用day[i]存着
每一天都会把上一天的字符串变一下再接到上一天的字符串的右边
比如说abcc x=1
那么第二天的字符串就是abcccabc
询问就是给出 l r p
求最后的串中 l~r 里 字符p出现的次数
l<=r<=10^18
且不会超过最后的串的长度
设sum(l,r,p)为p在l~r中出现的次数
可以转化成sum(l,r,p)= sum(1,r,p)-sum(1,l-1,p)
然后随便玩几下就会想到分治
譬如说每天的串是这样的
abc            设这个是s,长度为len
abcbca
abcbcacbcaab
...
可以把字符串看成
0 abc
1 abc bca
2 abcbca cbcaab
假设我们要算p出现的次数,x表示位置
mx一开始是3
1若(len<<(mx-1))>x 则让mx-=1
2若(len<<(mx-1))==x 则return (sum[len][p]<<(mx-1))
3若(len<<(mx-1)+day[mx])>=x 则让x-= day[mx],re+= d[mx][p],mx-= 1接着求
4若(len<<(mx-1)+day[mx])<x 
则x-=(len<<(mx-1))+day[mx],re+= d[mx][p]+(sum[len][p]<<(mx-1))
d[mx][p]
表示的是第mx天移动的那一部分中p的出现次数
由于每个串像这样切成两半后,移动的那一部分分别在两块的右端和左端
对于第三种情况,x-day[mx]+1~x刚好是一个完整的移动块
所以这样做是正确的
对于第四种情况
1~x-(len<<(mx-1))+day[mx]这部分的串
和(len<<(mx-1))+day[mx]+1～x这部分的串是相同的(显然...)
所以这么做是正确的
然后求d[][]的时候按天数从小到大求
先让day[i]%= len<<(i-1)把整个循环的去掉
d[i][j]= (sum[len][j]<<i)-dfs(len<<(i-1)-day[i],i,j)
就是假设i-1的串是abc,bc为第i天的移动串
