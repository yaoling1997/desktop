#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
using namespace std;
const int maxn= 500001,maxm= 1000001,oo= 1e8;
struct edge{
	int from,to,w,b;
};
vector<edge> edges;
vector<int> g[maxn];
vector<int> ST;
int sta[maxn],b[maxn],c[maxn],W[maxn],d[2][maxn],vis[maxn];
int p[2][maxn],Z[maxn][2],a[maxm];
int n,m,LL,i,x,y,z,tot,L,R,ans,top,cnt;
void addedge(int from,int to,int w,int b){
	edges.push_back((edge){from,to,w,b});
	edges.push_back((edge){to,from,w,b});
	int m= edges.size();
	g[from].push_back(m-2);
	g[to].push_back(m-1);
}
void spfa(int s,int t,int o){
	queue<int> Q;
	int i;
	for (i= 1;i<=n;i++)
		if (!c[i]) d[o][i]= oo;
	for (i= 0;i<ST.size();i++)
		Q.push(ST[i]);
	while (!Q.empty()){
		int u= Q.front(),len= g[u].size();
		Q.pop();vis[u]= 0;
		for (i= 0;i<len;i++)
			if ((g[u][i]&1)==o){
				edge e= edges[g[u][i]];
				if (d[o][e.to]>d[o][u]+e.w){
					d[o][e.to]= d[o][u]+e.w;
					p[o][e.to]= u;
					if (!vis[e.to]){
						vis[e.to]= 1;
						Q.push(e.to);
					}
				}
			}
	}
}
void check(int o,int x){
	if (vis[o]) return;
	vis[o]= 1;
	if (c[o]) return;
	check(p[x][o],x);
	p[x][o]= p[x][p[x][o]];
}
void build(int o,int l,int r){
	a[o]= oo;
	if (l+1<r){
		int mid= (l+r)>>1;
		build(2*o,l,mid);
		build(2*o+1,mid,r);
	}
}
void modify(int o,int l,int r,int x,int y,int val){
	if (x<=l&&r<=y){
		a[o]= min(a[o],val);
		return;
	}
	int mid= (l+r)>>1;
	if (x<mid) modify(2*o,l,mid,x,y,val);
	if (mid<y) modify(2*o+1,mid,r,x,y,val);	
}
void ask(int o,int l,int r,int v){
	ans= min(ans,a[o]);
	if (l+1==r) return;
	int mid= (l+r)>>1;	
	if (v<mid) ask(2*o,l,mid,v);
	else ask(2*o+1,mid,r,v);
}
int main()
{
	freopen("road.in","r",stdin);
	freopen("road.out","w",stdout);
	scanf("%d %d %d",&n, &m, &LL);
	for (i= 1;i<=m;i++){
		scanf("%d %d %d",&x, &y, &z);
		addedge(x,y,z,i);
	}
	for (i= 1;i<=LL;i++){
		scanf("%d",&sta[i]);
		b[sta[i]]= ++tot;
		edge e= edges[(sta[i]-1)*2];
		c[e.from]= c[e.to]= 1;
		cnt+= e.w;
		p[0][e.to]= e.from;
		d[0][e.to]= cnt;
		ST.push_back(e.from);
		if (i==LL) ST.push_back(e.to);
	}cnt= 0;
	for (i= LL;i>0;i--){
		edge e= edges[(sta[i]-1)*2];
		cnt+= e.w;
		p[1][e.from]= e.to;
		d[1][e.from]= cnt;
	}
	spfa(1,n,0);
	spfa(n,1,1);
	for (i= 1;i<=LL;i++){
		edge e= edges[(sta[i]-1)*2];
		p[0][e.from]= p[1][e.from]= e.from;
		p[0][e.to]= p[1][e.to]= e.to;
		Z[e.from][1]= sta[i];
		Z[e.to][0]= sta[i];
		c[e.from]= ++top;
		if (i==LL) c[e.to]= ++top;
	}
	for (i= 1;i<=n;i++)	check(i,0);
	for (i= 1;i<=n;i++) vis[i]= 0;
	for (i= 1;i<=n;i++) check(i,1);
	L= 1;R= tot+1;
	build(1,L,R);
	for (i= 1;i<=m;i++){
		edge e= edges[(i-1)*2];
		if (b[e.b]||e.from==e.to) continue;
		if (c[p[1][e.to]]<c[p[0][e.from]]) continue;
		b[e.b]= 1;
		x= b[Z[p[0][e.from]][1]];
		y= b[Z[p[1][e.to]][0]]+1;
		if (x==0||y<=x) continue;
		modify(1,L,R,x,y,d[0][e.from]+d[1][e.to]+e.w);
	}
	for (i= 1;i<=tot;i++){
		ans= oo;
		ask(1,L,R,i);
		if (ans==oo) ans= -1;
		printf("%d\n",ans);
	}
	return 0;
}
