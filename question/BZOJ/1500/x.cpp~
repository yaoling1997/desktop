#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#define gc getchar()
#define gi getint()
using namespace std;
const int maxn= 500001,oo= 100000;
struct node *null,*null1;
struct node{
	node *ch[2];
	int v,s,flip,sum,maxm,maxl,maxr,zig;
	node(int x):v(x),s(0),flip(0),sum(0),maxm(-oo),maxl(-oo),maxr(-oo),zig(oo){ch[0]= ch[1]= null;}
	int cmp(int k){
		int d= ch[0]->s;
		if (d+1==k) return -1;
		return k>d+1;
	}
	void mt(){
		s= ch[0]->s+ch[1]->s+1;
		int suml,sumr,l1,r1,l2,r2,mal,mar;
		if (ch[0]->zig!=oo){
			suml= ch[0]->zig*ch[0]->s;
			if (zig>0)
				l1= r1= mal= suml;
			else l1= r1= mal= zig;
		}
		else {
			suml= ch[0]->sum;
			l1= ch[0]->maxl;
			r1= ch[0]->maxr;
			mal= ch[0]->maxm;
		}
		if (ch[1]->zig!=oo) {
			sumr= ch[1]->zig*ch[1]->s;
			if (zig>0)
				l2= r2= mar= sumr;
			else l2= r2= mar= zig;
		}
		else {
			sumr= ch[1]->sum;
			l2= ch[1]->maxl;
			r2= ch[1]->maxr;
			mar= ch[1]->maxm;
		}
		if (ch[0]==null) 
			l1= -oo,r1= 0;		
		sum= suml+sumr+v;l2= max(l2,0);r1= max(r1,0);
		maxl= max(l1,suml+l2+v);
		maxr= max(r2,sumr+r1+v);
		maxm= max(mal,mar);
		maxm= max(maxm,r1+l2+v);
	}
	void pushdown(){
		if (zig!=oo){
			v= zig;
			if (ch[0]!=null)
				ch[0]->zig= zig;
			if (ch[1]!=null)
				ch[1]->zig= zig;
			zig= oo;
		}
		if (flip){
			flip= 0;
			swap(ch[0],ch[1]);
			ch[0]->flip^= 1;ch[1]->flip^= 1;
			for (int i= 0;i<=1;i++)
				swap(ch[i]->maxl,ch[i]->maxr);
		}
	}
	void clear(){
		v= s= flip= sum= 0;ch[0]= ch[1]= null;
		zig= oo;maxl= maxr= maxm= -oo;
	}
};
node *stack[maxn];
int c[maxn];
node *root,*left,*right,*mid,*o;
int i,j,k,tot,top,tnt,n,m,x,y,z,bl;
node *build(int sz){
	if (!sz) return null;
	node *o,*l= build(sz/2);
	if (!top)
		o= new node(c[tnt++]);
	else {
		o= stack[top--];
		o->v= c[tnt++];
	}
	o->ch[0]= l;
	o->ch[1]= build(sz-sz/2-1);
	o->mt();
	return o;
}
void rotate(node *&o,int d){
	node *k= o->ch[d^1];o->ch[d^1]= k->ch[d];k->ch[d]= o;
	o->mt();k->mt();o= k;
}
void splay(node *&o,int k){
	o->pushdown();
	int d= o->cmp(k);
	if (d!=-1){
		if (d) k-= o->ch[0]->s+1;
		node *p= o->ch[d];p->pushdown();
		int d2= p->cmp(k);
		if (d2!=-1){
			if (d2) k-= p->ch[0]->s+1;
			splay(p->ch[d2],k);
			if (d==d2) rotate(o,d^1);else rotate(o->ch[d],d2^1);
		}rotate(o,d^1);
	}
}
node *merge(node *left,node *right){
	splay(left,left->s);
	left->ch[1]= right;
	left->mt();
	return left;
}
void split(node *o,int k,node *&left,node *&right){
	splay(o,k);
	left= o;right= o->ch[1];
	o->ch[1]= null;
	left->mt();
}
void del(node *o){
	if (o==null) return;
	del(o->ch[0]);
	del(o->ch[1]);
	o->clear();
	stack[++top]= o;
}
int gi{
	char c= getchar();int re= 0,p= 1;
	while ((c<'0'||c>'9')&& c!='-') c= gc;
	if (c=='-'){p= -1;c= gc;}
	while (c>='0'&&c<='9'){re= re*10+c-'0';c= gc;}
	return re*p;
}
int main()
{
	freopen("1.in","r",stdin);
	freopen("1.out","w",stdout);
	null= new node(0);null->maxr= 0;
	scanf("%d %d",&n, &m);
	c[0]= -oo;
	for (i= 1;i<=n;i++)
		c[i]= gi;
	root= build(n+1);
	for (int a1= 1;a1<=m;a1++){
		char ch;
		ch= gc;
		if (ch=='I'){
			for (i= 1;i<=5;i++) ch= gc;
			x= gi;y= gi;if (!y) continue;
			for (i= 0;i<y;i++)
				c[i]= gi;
			tnt= 0;
			mid= build(y);
			split(root,x+1,left,right);
			root= merge(merge(left,mid),right);
		}else if (ch=='D'){
			for (i= 1;i<=5;i++) ch= gc;
			x= gi;y= gi;if (!y) continue;
			y+= x-1;
			split(root,x,left,o);
			split(o,y-x+1,mid,right);
			root= merge(left,right);
			del(mid);
		}else if (ch=='R'){
			for (i= 1;i<=6;i++) ch= gc;
			x= gi;y= gi;if (!y) continue;
			y+= x-1;
			split(root,x,left,o);
			split(o,y-x+1,mid,right);
			mid->flip^= 1;
			root= merge(merge(left,mid),right);
		}else if (ch=='G'){
			for (i= 1;i<=6;i++) ch= gc;
			x= gi;y= gi;
		    if (!y){printf("0\n");continue;}
			y+= x-1;
			split(root,x,left,o);
			split(o,y-x+1,mid,right);
			printf("%d\n",mid->sum);
			root= merge(merge(left,mid),right);
		}else {
			ch= gc;ch= gc;
			if (ch=='K'){
				for (i= 1;i<=6;i++) ch= gc;
				x= gi;y= getint();z= gi;
				if (!y) continue;
				y+= x-1;
				split(root,x,left,o);
				split(o,y-x+1,mid,right);
				mid->zig= z;
				root= merge(merge(left,mid),right);
			}else {
				for (i= 1;i<=5;i++) ch= getchar();
				printf("%d\n",root->maxm);
			}
		}
	}
	return 0;
}
