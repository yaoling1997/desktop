#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<algorithm>
using namespace std;
const int maxn= 60001,oo= 999999999;
const double eps=1e-6,rad= 0.3333;
struct point {
	double x,y;
};
typedef point vec;
point ch[maxn];
vec pp[maxn];
point j[6];
int i,n,m,a1,a2,a3,a4,b1,b2,b3,b4;
vec v1,v2,v3,v4,u1,u2,u3,u4;
double ans,g1,g3,po;
vec operator +(vec a,vec b){a.x+= b.x;a.y+= b.y;return a;}
vec operator -(vec a,vec b){a.x-= b.x;a.y-= b.y;return a;}
vec operator *(double t,vec a){a.x*= t;a.y*= t;return a;}
vec operator /(double t,vec a){a.x/= t;a.y/= t;return a;}
bool operator <(vec a,vec b){return (a.x<b.x) || (a.x==b.x && a.y<b.y);}
double cj(vec a,vec b){return a.x*b.y-a.y*b.x;}
double dj(vec a,vec b){return a.x*b.x+a.y*b.y;}
vec rot(vec a,double r){
	return (vec){a.x*cos(r)-a.y*sin(r),a.x*sin(r)+a.y*cos(r)};
}
int inc(int a){
	a++;
	if (a>m) a-= m;
	return a;
}
void rotate(double r){
	v1= rot(v1,r);
	v2= rot(v2,r);
	v3= rot(v3,r);
	v4= rot(v4,r);
	while (cj(v2,ch[inc(a2)]-ch[a2])<=0) a2= inc(a2);
	while (cj(v4,ch[inc(a4)]-ch[a4])<=0) a4= inc(a4);
}
double length(vec a){return sqrt(dj(a,a));}
double dist1(point a,point b,point c){return fabs(cj(b-a,c-a)/length(b-a));}
double angle(vec a,vec b){return acos(dj(a,b)/length(a)/length(b));}
point jd(point p,vec v,point q,vec w){
	vec u= p-q;
	return p+cj(w,u)/cj(v,w)*v;
}
void xx(){
	double x= dist1(ch[a1],ch[a1]+v1,ch[a3]);
	double y= dist1(ch[a2],ch[a2]+v2,ch[a4]);
	if (ans> x*y){
		ans= x*y;
		b1= a1;
		b2= a2;
		b3= a3;
		b4= a4;
		u1= v1;
		u2= v2;
		u3= v3;
		u4= v4;
	}
}
bool cmp(vec a,vec b){return a<b;}
int main()
{
	freopen("1.in","r",stdin);
	freopen("1.out","w",stdout);
	scanf("%d\n",&n);
	for (i= 1;i<=n;i++) {
		scanf("%lf %lf\n",&pp[i].x, &pp[i].y);
		pp[i]= rot(pp[i],rad);
	}
	sort(pp+1,pp+n+1,cmp);
	for (i= 1;i<=n;i++){
		while (m>1 && cj(ch[m]-ch[m-1],pp[i]-ch[m-1])<=0) m--;
		ch[++m]= pp[i];
	}
	int k= m;
	for (i= n-1;i>0;i--){
		while (m>k && cj(ch[m]-ch[m-1],pp[i]-ch[m-1])<=0) m--;
		ch[++m]= pp[i];
	}
	if (m>1) m--;
	for (i= 1;i<=m;i++){
		if (a1==0 || ch[a1].x>ch[i].x) a1= i;
		if (a2==0 || ch[a2].y>ch[i].y) a2= i;
		if (a3==0 || ch[a3].x<ch[i].x) a3= i;
		if (a4==0 || ch[a4].y<ch[i].y) a4= i;
	}
	v1.y= -1;v2.x= 1;v3.y= 1;v4.x= -1;ans= oo;
	while (po<3.4415926){
		g1= angle(v1,ch[inc(a1)]-ch[a1]);
		g3= angle(v3,ch[inc(a3)]-ch[a3]);
		po+= min(g1,g3);
		if (fabs(g1-g3)<eps){
			rotate(g1);
			a1= inc(a1);
			a3= inc(a3);
			xx();
		}else if (g1<g3){
			rotate(g1);
			a1= inc(a1);
			xx();
		}else {
			rotate(g3);
			a3= inc(a3);
			xx();
		}
	}
	printf("%.5lf\n",ans);
	j[1]= jd(ch[b1],u1,ch[b2],u2);
	j[2]= jd(ch[b2],u2,ch[b3],u3);
	j[3]= jd(ch[b3],u3,ch[b4],u4);
	j[4]= jd(ch[b4],u4,ch[b1],u1);
	int p= 1;
	for (i= 2;i<=4;i++)
		if (j[i].x<j[p].x) p= i;
	swap(j[1],j[p]);
	p= 2;
	for (i= 3;i<=4;i++)
		if (j[i].y<j[p].y) p= i;
	swap(j[2],j[p]);
	if (j[3].x<j[4].x) swap(j[3],j[4]);
	j[1]= rot(j[1],-rad);
	j[2]= rot(j[2],-rad);
	j[3]= rot(j[3],-rad);
	j[4]= rot(j[4],-rad);
	p= 0;
	for (i= 1;i<=4;i++){
		if (fabs(j[i].x)<eps) j[i].x= 0;
		if (fabs(j[i].y)<eps) j[i].y= 0;
		if (!p || (j[i].y<j[p].y || (j[i].y==j[p].y && j[i].x<j[p].x)))
			p= i;
	}
	for (i= p;i<=4;i++)
		printf("%.5lf %.5lf\n",j[i].x, j[i].y);
	for (i= 1;i<p;i++)
		printf("%.5lf %.5lf\n",j[i].x, j[i].y);
	return 0;	
}
