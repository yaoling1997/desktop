[HNOI2008]玩具装箱toy
x:
裸的转移很好想，f[i]= f[j]+w[i,j] w[i,j]= (i-j-1+c[i]-c[j]-L)^2
一看就知道这是1D1D动态规划，打个决策表，看看决策是否单调，如果硬要证明的化就用四边形不等式吧，但打决策表是一种实用的方法，不放心的话跟暴力拍拍。
发现有单调性后就可以用二分栈优化了(其实还不如说它是双端队列),栈中存决策
stack[i]为当前q1[i]~q2[j]的最优决策,q1[i]应该>stack[i]
每次取栈底更新,更新后更新栈:
先看栈底的元素是否能被退掉(下一个要计算的下标已经比当前栈底元素管辖上限大了)
然后看q1[top]从新来的转是否优于从stack[top]转,若优于,则退栈顶,继续比较,直到栈为空。若不优于,则在q1[top]~q2[top]中二分转折点,r要从n+1开始,否则mid取不到r,然后若从stack[top]转更优,则l= mid
否则r= mid。
若q2[top]==n则表示不要入栈了
