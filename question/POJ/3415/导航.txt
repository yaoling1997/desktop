题意是给两个串A,B求它们的长度不小于k的公共子串个数
在A,B中开始位置不同也视为不同的公共子串
两个串用后缀数组做一般是要把其中一个串接到另一个串后面
在它们之间添加分隔符
由于子串和后缀的前缀一一对应
所以求长度不小于k的公共子串
就是求长度不小于k的后缀的公共前缀
后缀要分别属于A,B
先求出后缀数组
然后再求出height数组
按名次从前往后扫
同时维护两个单调栈A,B
单调栈是按与当前扫到的sa[i]的lcp单增弄的
每扫到一个height[i]就用去更新单调栈A和B
height[i]<K就直接清空单调栈即可
拿A为例
若height[i]<A的堆顶元素
就让cx+= A[la]*(height[i]-sta[la])
同时让堆顶--
把大于height[i]的元素都压到一个元素中
设ca,cb分别是两个栈中的lcp长度总和
然后若这个后缀下标是A中的,就让答案+= cb-nb*(K-1)
然后若这个后缀下标是B中的,就让答案+= ca-na*(K-1)
na是A中存了多少个后缀
nb是B中存了多少个后缀
